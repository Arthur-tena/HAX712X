---
title: "Project guidelines: 2023-2024"
---

- Work in groups of 2, 3 or 4 students, assigned at random (list on the Moodle website).

# General instructions

For this course, the grading consists of two projects: one group project (group composition available on [Moodle](https://moodle.umontpellier.fr/course/view.php?id=22454)) and a personal one.

You need to create a GitHub account as the expected outputs for this course are GitHub repositories.

## Intermediate projects (20 % + 10 %)

1. The first part is a personal project. We expect you to create a simple GitHub page, with information answering the guidelines. This part corresponds to **20% of the final grade**. The due date is **November 16 (23:59)**.

2. The second part consists in starting the group project. It will consist of preliminary work and organization of the workload, git first steps for the group project. The groups will be available on [Moodle](https://moodle.umontpellier.fr/course/view.php?id=22454r). This part corresponds to **10% of the final grade**. The due date is **October 16 (23:59)**

## Final project (70 %)

The details of the projects might evolve before the allocation phase, and a precise grid will be given in the project section.

The project repository **must show a balanced contribution between group members** and intra-group grade variation could be made to reflect issues on the intra-group workload balance.
The due date is **December 12 (23:59)**.



## Details for the personal project (weather forecast app)

<u>Motivation</u>: The main objective of this project is to create a simple website providing the weather forecast (in Montpellier) for the following 5 days. The data to be used for your project is to be obtained from [open-meteo.com](https://open-meteo.com/en/docs/meteofrance-api).


For this project, you need to create a GitHub repository (*e.g.*,  [https://github.com/tanglef/chaoseverywhere](https://github.com/tanglef/chaoseverywhere))
with your code, and then provide this URL in the following survey
[https://framaforms.org/hax712x-depot-git-personnel-1693995810](https://framaforms.org/hax712x-depot-git-personnel-1693995810).
You also have to create a simple webpage using `Quarto`, whose URL is accessible in your GitHub repository,
The webpage created will automatically update the weather forecast in Montpellier. For instance, it could display something like this:

![Weather Forecast (<u>source</u>: [meteoblue.com](https://www.meteoblue.com/))](meteo.png){width=500}

::: {.callout-note}
The closer you can reproduce something in the spirit of the previous illustration, the higher the grade.
:::

An additional constraint is that the app should be autonomous once created, and could be refreshed every day automatically (like a real weather forecast website!).
An example to help you in this task is available [here](https://josephsalmon.github.io/Tweets/economics/index.html) (and the [associated source code](https://github.com/josephsalmon/Tweets/blob/master/economics/index.qmd)), updating time series on a monthly basis.
The updated result must be obtained using a GitHub page and a GitHub action with `Quarto`; see [https://quarto.org/docs/publishing/github-pages.html](https://quarto.org/docs/publishing/github-pages.html) for details, and also the associated `yml` [here](https://github.com/josephsalmon/Tweets/blob/master/.github/workflows/publish.yml).

For the automatic update and scheduling, see the [schedule](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule) event description.

Moreover, you will write a short description to explain your methodology
(say equivalent to 1 or 2 pages long maximum).


<u>Mandatory outputs</u>:

- a GitHub repository
- a GitHub web page containing SVG images representing the weather (format only please; see
examples from [freesvg.org](https://freesvg.org/),
[creativecommons](https://search.creativecommons.org/),
[clker](http://www.clker.com/),
[openclipart](https://openclipart.org/), etc.) along with the highest/lowest temperature for the day, wind average, and amount of precipitation, that automatically updates.
- a short description of the methodology used, below the forecast itself.


## Detail for the team project



## Intermediate tasks
 - data **cleaning steps**: removing missing values if need be.

## Major objectives:
- displays **interactive maps**.

Useful packages (non-exhaustive list):

- `osmnx`
- `plotly`
- `folium`
- `networkx`


## Timing
- **Mid-term** project snapshot: Due date  **November 15, 23:59**. This will include the creation of a ```github``` repository (README.md, etc.), a short description of how the work is shared in the team and a detailed work program for the project including the tasks' attribution (coding).

- **Preliminary presentation**: An oral presentation with *Beamer* (duration: 5mn), in-person on date/place TBC (December 2, 11:30 to 13:00).

- Due date (final project): The ```github``` repository should be completed before **Tuesday 6 December (23:59)**. Nothing pushed after the deadline will be taken into account. The oral presentation (max: 20mn) will be in-person **Friday 9 December (8:00AM)** (room: 36.4).


## Elements expected / Grading


### Summary

|General |Details|Points (out of 20)|
|-----|--------------|----------------|
|**Mid-term**|Git / branches|1.5             |
|     |Task affectation|1
|     |Dataset creation|1               |
|**Preliminary-term**|Beamer (structure, spelling)|  0.5           |
|**Code**|Science Technical Problem Resolution|4.5             |
|     |Readme/Comments/Pep8|1               |
|     |Unit Tests/CI/Deploy : wheel|1               |
|     |Class (create at least 1 class)|0.5             |
|     |Reproducibility/Dataset loading|1               |
|     |Graphical aspects: Widgets, clickable map, etc. |2.5             |
|     |Time/Memory efficiency|1               |
|     |Documentation |1.5             |
|**Oral** |Beamer (structure, spelling)|1             |
|     |Clarity / lively presentation / Rhythm / Show |2               |
| **Total**|| 20|


### Details

- The ultimate goal is to provide a Python module that can be imported with `pip` and contains your work.
A description of the procedure will be needed (imagine you are addressing to a user not aware of your package).
An example of a project made in 2020, is available at <https://github.com/tanglef/chaoseverywhere>.

<!-- - Your Python module should have two submodules corresponding to the two main tasks (prediction and visualization) -->

- The project must be stored on a `GitHub` repository.

- You have to choose a name for your project. Hereafter, it is denoted by `my_module_name`.

- It should contain all the aspects described below.

### Science
Solve (even partially) the problem raised in your project description.


### Project structure

- All the code will be placed in a subdirectory called `/my_module_name` (choosing your module name accordingly).

- A slide deck in [quarto](https://quarto.org/docs/presentations/)
<!-- A presentation (in an open source format: like Beamer, with TeX, see for instance some templates here <https://github.com/josephsalmon/OrganizationFiles>,  or LibreOffice Impress) will be put in a `/beamer` directory. -->
will be put in a `/slide` directory.
The later will be a short presentation of the work that will be orally presented during 15mn in front of a jury.

- A documentation (using `sphinx`) will be stored in a `/doc` subdirectory.

### Git aspects

- A (markdown) `readme.md` file introducing your work and the team member (first/last name + email).

- A `.gitignore` that prevents garbage files to be included in your project.

- Equilibrated commits in two branches should be done (*e.g.,* in the development branch and the master one), and merged for the milestone day.

### Object programming aspects

- You should code at least one `Python` class.

### Dataset(s)

- The data used should be available in a way that the end user does not need to perform a manual download of any kind (use the `download` package or variants for instance).

### Graphical aspects

The repository will contain code of the following nature:

<!-- - A code producing a (possibly interactive) map.

- histograms/kde/swarmplots/etc. plots illustrating the data. -->

### Time/memory evaluation

- A full study of the time and memory footprint of the code produced will be provided for the whole pipeline used.

### Documentation

- Documentation should be added correctly for the functions written. Please use `sphinx`.

### Test and CI

- Provide unitary tests to check that the function you proposed satisfies the requirement you target.
- Implement a Continuous Integration solution with `github` that runs your unitary test at each commit.

### Deploy

- It should be possible to package your Python module using `wheel` (*i.e.*, you need to provide a `setup.py`, file).

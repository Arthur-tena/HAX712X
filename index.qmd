# HAX712X: Software development for data science

(Almost) everything you need to know as an applied mathematician/statistician concerning coding and system administration.

## Teachers

- Joseph Salmon: joseph.salmon@umontpellier.fr,
- Benjamin Charlier: benjamin.charlier@umontpellier.fr

This course material was improved with the help of some students including:

- Amelie Vernay
- Tanguy Lefort


## Prerequisite

Students are expected to know basic notions of probabilities, optimization, linear algebra and statistics for this course.
Some rudiments on coding are also expected (if, for, while, functions) but not mandatory.

## Course description

This course focuses on discovering good coding practices (the language used is Python, but some elements of bash and git will also be useful) for professional coding.
A special focus on data processing and visualization will be at the heart of the course.
We will mostly focus on basic programming concepts, as well as on discovering the Python scientific libraries, including ```numpy, scipy, pandas, matplotlib, seaborn```.
Beyond `pandas` ninja skills, we will also introduce modern practices for coders: (unitary) tests, version control, documentation generation, etc.


1. 15/09/2023 (BC): [Linux essentials/command line tools: regexp, grep, find, rename](Courses/Bash/tp.qmd)

2. 22/09/2023 (BC): [Git: a first introduction, `github`, ssh key creation, various git commands, conflict, pull request](Courses/Git/tp.qmd); see also [Bonus/](Bonus/README.md), [hands on git](Courses/Git/tp.qmd)

3. 29/09/2023 (BC): [IDE: VScode](Courses/IDE/), [Python virtual env: Anaconda](Courses/Venv/tp.qmd), [Python virtual environment](Courses/Venv/tp.qmd), terminal, etc.

4. 06/10/2023 (BC + JS): [Create a Python Module](Courses/Python-modules/tp.qmd), [classes (`__init__`, `__call__`, etc...), operator overloading, files handling](Courses/Classes_n_Exceptions/tp.qmd),

5. 13/10/2022 (JS): [unit tests](Courses/Test/tp.qmd)

6. 20/10/2022 (JS): [Pandas: first steps / missing data](Courses/Pandas/tp.qmd)

7. 27/10/2022 (BC): [Documentation with Sphinx](Courses/Docs/tp.qmd) and  [Continuous Integration (CI)](Courses/CI/tp.qmd)

8. 10/11/2022 (JS): [`scipy, numpy`: Images/channel](Courses/ScipyNumpy/tp.qmd)

9. 17/11/2022 (JS): [Sparse matrices,](Courses/TimeMemory/tp.qmd) [graphs and memory](Courses/TimeMemory/tp.qmd)

10. 15/12/2022 (BC + JS) The end:  Project presentations


## Grading:

### Intermediate projects (15 % + 15 %)

These two projects are due to 

1. Due to git and IDE

2. Advance 


### Final project (70 %)

**Warning:** The details of the projects might evolve before the allocation phase, and a precise grid will be given in the project section.

**Warning:** The project repository must show a balanced contribution between group members and intra-group grades variation could be made to reflect issues on the intra-group workload balance.

### Bonus

**1 supplementary point** on the final grade of the course can be obtained for contributions to improve the course material (practicals, Readme, etc.).
See the [Bonus](Bonus/) section for more details on how to proceed.



## Books and other resources

The resources for the course are available on the present `github` repository. Additional elementary elements (**in French**) on Python are available in the course [HLMA310](http://josephsalmon.eu/HLMA310.html) and the associated lecture notes [IntroPython.pdf](http://josephsalmon.eu/enseignement/Montpellier/HLMA310/IntroPython.pdf).

### Moodle webpage



### Additional resources

- (General): [The Missing Semester of Your CS Education](https://missing.csail.mit.edu/)
- (Data Science): [Python Data Science Handbook, With Application to Understanding Data](https://jakevdp.github.io/PythonDataScienceHandbook/) by J. Van DerPlas, 2016;<br>
 **videos**: [Reproducible Data Analysis in Jupyter](http://jakevdp.github.io/blog/2017/03/03/reproducible-data-analysis-in-jupyter/)
- (General) Skiena, *The algorithm design manual*, 1998
- (General) Courant et al. , *Informatique pour tous en classes préparatoires aux grandes écoles: Manuel d'algorithmique et programmation structurée avec Python*, 2013, (french)
- (General/data science) Guttag, *Introduction to Computation and Programming*,
2016

- (Code and style) Boswell et Foucher, *The Art of Readable Code*, 2011
- (Scientific computing tools for Python) [Scipy lectures notes](http://www.scipy-lectures.org/)
- (Datasets) [Open Climate Data](http://openclimatedata.net/)

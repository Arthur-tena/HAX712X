---
title: "Classes & Exceptions"
---

## Classes

*Classes* are central elements in *Object-oriented programming (OOP)*

A class structure defines an object, its properties, and all the operations one can apply to it.

In Python, a class contains *attributes* (variables) and *methods* (functions).
It is defined similarly to a function, replacing the `def` keyword with `class`. The name of a class should be either CapWords or CamelCase^[CamelCase (&#127467;&#127479;: *casse de chameau*): the name comes from the "bumpy" look of its letters as in the Wikipedia illustration below <img  src="https://upload.wikimedia.org/wikipedia/commons/e/ef/CamelCase.svg" width="65%" style="display: block; margin-right: auto; margin-left: auto;"></img>].

Usually, a class contains some class methods than can be seen as functions inside the class.

* The first argument of a (non-static) method is usually called `self`:  it is a mandatory element. This `self` argument is for self-reference.

* Some method names have a specific meaning, for instance:
   * `__init__`:  name of the method invoked when creating the object (instantiation)
   * `__call__`: method invoked when calling the object
   * `__str__`: method invoked when a class has a representation as a string, *e.g.,* when passing it to the `print` function
   * see [Python documentation](http://docs.python.org/3/reference/datamodel.html#special-method-names) for more special names.

### Example

Let us define a simple `Point` class, representing a point in the plane (*i.e.,* a point in $\mathbb{R}^2$):

```{python}
class Point(object):
    """A class to represent planar points."""

    def __init__(self, x, y):
        """Create a new point (x, y)."""
        self.x = x
        self.y = y

    def translate(self, dx, dy):
        """Translate the point by dx and dy."""
        self.x += dx
        self.y += dy

    def __str__(self):
        return f"Point: [{self.x:.3f}, {self.y:.3f}]"
```

::: {.callout-note}
If you are not familiar with printing in Python, start with the new f-strings format; see for instance: <https://zetcode.com/python/fstring/>.
:::

To create a new instance of the class `Point` you run the following code:

```{python}
p1 = Point(x=0, y=0)  # call __init__ ;
```
Now, you can access the attributes of the object `p1`:

```{python}
print(p1.x)
print(p1.y)
print("{0}".format(p1))  # call __str__
p1
```

To apply our `translate` method to the point `p1`:

```python
p1.translate(dx=1, dy=1)
print(p1.translate)
print(p1)
print(type(p1))
```

To run a method of the object `p1` (which is an instance of `Point`) simply use the dot notation: `p1.translate(arg1, arg2)` is equivalent to `Point.translate(p1, arg1, arg2)`.


```{python}
p2 = Point(1, 1)
p1.translate(0.25, 1.5)
print(p1)
print(p2)
```
::: {.callout-note}
You might have already used that syntax with the dot notation in `numpy`, for instance when executing `numpy` functions as follows

```{python}
import numpy as np
rng = np.random.default_rng(seed=12345)
a = rng.random((3, 3))
a.mean(axis=0)
```
:::

### `__call__`

`MyClass(arg1, arg2, ...)` is a shorthand for `MyClass.__call__(arg1, arg2, ...)`, so this allows writing classes where the instances behave like functions and can be called like a function

```{python}
class Sum:
    def __init__(self):
        print("Instance Created")

    # Defining __call__ method
    def __call__(self, a, b):
        print(a + b)

# Instance created
sum_as_a_function = Sum()

# __call__ method will be called
sum_as_a_function(10, 20)
```
A test function of interest is `isinstance` that allows to check if an object is of the correct class. For instance, one can check is `sum_as_a_function` is an instance of `Sum`:
```{python}
isinstance(sum_as_a_function, Sum)
```
similarly one can test if it is an instance of `Point`:
```{python}
isinstance(sum_as_a_function, Point)

```


### Remark

 * A method of a class can modify the state of a particular instance.
 This does not alter the other instantiations of the class.
 <!-- * Methods that do not depend on a particular instantiation can be decorated with the `@staticmethod` keyword. Such method **do not** have their first arg referring to `self`...
 see <https://blog.devgenius.io/why-python-developers-should-use-staticmethod-and-classmethod-d5fe60497f23> -->


::: {.callout-important appearance='default' icon="false"}
##  EXERCISE: Gaussian class

Implement a class `Gaussian` with attributes `mean` and `std` with a method

- `__str__` returning a string with the expression of the density
- `__eq__`  testing the equality of two instances. You should use numpy.isclose()
- `__add__` implementing the addition of independent Gaussian, or more precisely their pdfs (probability density functions)
- `__radd__` implementing the addition of independent Gaussian, or more precisely their pdfs (probability density functions)

Note: when executing `a+b` what really happens is that the __add__ method of the `a`: object is called `a.__add__(b)`.


```{python}
#| echo: false
class Gaussian:
    def __init__(self, mean, std):
        """Create a couple (mean, std)."""
        self.mean = mean
        self.std = std

    def __str__(self):
        return f"pdf: exp(-(x - {self.mean:1.3f})^2 / ({self.std:1.3f}*2^2)) / sqrt(2 * pi * {self.std:1.3f}^2)"

    def __add__(self, other):
        new_mean = self.mean + other.mean
        new_std = (self.std ** 2 + other.std ** 2) ** 0.5
        return Gaussian(new_mean, new_std)

    def __radd__(self, other):
        if other == 0:
            return self
        else:
            return self.__add__(other)

    def __eq__(self, other):
        return np.isclose(self.mean, other.mean) and np.isclose(self.std, other.std)
```
```{python}
g1 = Gaussian(0.0, 1.0)
g2 = Gaussian(1.0, 2.0)
g3 = Gaussian(2.0, 2.0)
g4 = Gaussian(3.0, 3.0)

print(g1)
print(g2)
print(g3)
print(g4)
print(g2 + g1)
print(sum([g1, g2, g3]))
print(sum([g1, g2, g3]) == g4)
```
:::

### Inheritance, the sub-Gaussian case (of a kind)

Classes can inherit methods from other classes. You can use `super` (Latin word for "above") to access the parent class.

A simple test consists of checking whether a class has inherited from another class: `issubclass` allows to check this heritage property:

```{python}
class IsoGaussian(Gaussian):
    def __init__(self, mean):
        super().__init__(mean, 1.0)

gg1 = IsoGaussian(3)
print(gg1)
issubclass(IsoGaussian, Gaussian)

```

Many examples of interest are considered in the `scikit-learn` package (see for instance the module [Linear Model](https://github.com/scikit-learn/scikit-learn/blob/95119c13a/sklearn/linear_model/_base.py#L391) often used in machine learning or statistics).

For more information on `super`, see for instance this [Real Python Tutorials](https://realpython.com/python-super/).

## Exceptions

This section is inspired by [Fabien Maussion's lecture on Scientific Programming](https://fabienmaussion.info/scipro_ss2018/html/09-Exceptions.html), and describes how to handle exceptions in `python`.

 - In `python` errors are handled through `Exceptions`
 - An error throws an `Exception` interrupting the normal code execution
 - Execution can overpass such an issue inside a bloc with `try` - `except`
 - A typical use case: stop the program when an error occurs:


```python
def my_function(arguments):

    if not verify(arguments):
        raise Exception("Invalid arguments")

    # ...
    # Keep working if the exception is not raised
```

The list of possible errors is available here: <https://docs.python.org/3/library/exceptions.html#bltin-exceptions> and includes `NameError`, `ImportError`, `AssertionError` etc.

One may use `try`, `except` or `finally` to prevent errors to stop the program:

```python
try:
    # Part 1: Normal code goes here
except:
    # Part 2: Code for error handling goes here
    # This code is not executed unless Part 1
    # above generated an error
finally:
    # Optional: This clause is executed no matter what,
    # and is generally used to release external resources.
```

### Example


```{python}
try:
    print("test_var testing:")
    e = 4
    print(test_var) # raise an error: the test_var variable is not defined
except NameError:
    print("Caught an exception: test_var does not exist")
finally:
    print("This code is executed every time")

print("The program keep continuing... it does not freeze!")
print(f"Beware! the affectation step: e = {e} was executed.")
```

To obtain some information on the error: it is possible to access the instance of the `Exception` class thrown by the program through the syntax:


```{python}
try:
    print("test")
    print(testtt)  # Error: the variable testtt is not defined
except Exception as name_exception:
    print("Caught an exception:", name_exception)
```

::: {.callout-note}

A common use case is to test if the import of a package was successful or not. For instance, the following code will not raise an error if the package `pooch` is not installed on your computer.
```python
try:
    import pooch
except Exception as e:
    print(e)
```
:::


Common exceptions can be found here: <https://docs.python.org/3/library/exceptions.html>

### The `with` statement

::: {.callout-important}

You have to run the following lines at a location where a directory called `scripts/` containing a function `hello-world.py` exists. The one used in the lecture is available [here](https://github.com/josephsalmon/HAX712X/blob/main/Courses/ClassesExceptions/scripts/hello-world.py) if you have not cloned the course repository (if you have it is available in `scripts/`). You can of course create your own if you prefer.
:::

```{python}
fname = "./scripts/hello-world.py"

with open(fname) as file:  # Use file to refer to the file object
    data = file.read()
    print(data)
    # at the end of the code chunk, the file.__exit__() method is called (i.e., file.close() is done automatically)
```

Now

```{python}
fname = "scripts/hello-world_do_not_exist.py"
try:
    # 1/0  # Yncomment at some point and run
    file = open(fname)
    data = file.read()
    print(data)
except FileNotFoundError:
    print("File not found!")
except (RuntimeError, TypeError, NameError, ZeroDivisionError):
    print("Specific Error message 2")
finally:
    file.close()  # Important line to release access to the file!
```



::: {.callout-important appearance='default' icon="false"}
##  EXERCISE: Improving the Gaussian class

Create a sub-class `GaussianBis` where you check if the user has provided float arguments (see also `assert` and `isinstance` routines).
Print a custom explicit error message if it is not the case.
:::


## Scope

```python
e = 0
print(e)

for i in range(1):
    e = 1

print(e)


def f():
    e = 2

print(e)
```

**Conclusion**: `e` is only "visible" inside the function definition.
See <https://realpython.com/python-scope-legb-rule/> for more information on this topic.


## Manipulate file names across platforms
Each OS (Linux / Windows /Mac) might have a different syntax to describe a file path.
The following would avoid naming conflict due to each OS syntax and could be important for your project if you work with colleagues with a different OS from yours.


```python
import os

print(os.path.join('~', 'work', 'src'))
print(os.path.join(os.getcwd(), 'new_directory'))
os.path.expanduser?
print(os.path.expanduser(os.path.join('~', 'work', 'src')))
```


::: {.callout-important appearance='default' icon="false"}
##  EXERCISE: Create a bunch of files

Write a simple script that creates, in the sub-directory `scripts`, the following text files: `myDb_000.txt`, `myDb_001.txt`, `myDb_002.txt`, ..., `myDb_049.txt`. The `i`-th file should contain a single line with the average of the `i` first digits of pi.


**Hint**:

- You might need zero padding.
- You can check what the following code does.

```python
file = open("copy.txt")
file.write("Your text goes here")
file.close()
```
- You might also need some precision for the digits of $\pi$, hence using `mpmath` instead of `numpy`.

```python
from mpmath import mp
import numpy as np

if not os.path.isdir("script"):
    os.mkdir("script")

for i in range(2, 50):


for i in range(2, n_tot + 2):
    val = '0' + str(i)
    print(str(f"{i:{val}}"))
```
:::

## References

* [Python official web page](http://www.python.org) and its [style and writing recommendation](http://www.python.org/dev/peps/pep-0008)
* [Think Python](http://www.greenteapress.com/thinkpython/) - A free book by  Allen Downey.
* [Python Essential Reference](http://www.amazon.com/Python-Essential-Reference-4th-Edition/dp/0672329786) - a good reference for general Python coding
* [Python Data Science Handbook](https://jakevdp.github.io/PythonDataScienceHandbook/) - an excellent book for data science in Python by Jake VanderPlas (associated notebook available online)

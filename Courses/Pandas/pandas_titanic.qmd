---
title: "Titanic dataset"
---
**Disclaimer**: this course is adapted from the work [Pandas tutorial](https://github.com/jorisvandenbossche/pandas-tutorial/blob/master/01-pandas_introduction.ipynb) by Joris Van den Bossche. `R` users might also want to read [Pandas: Comparison with R / R libraries](https://pandas.pydata.org/docs/getting_started/comparison/comparison_with_r.html) for a smooth start in Pandas.

We start by importing the necessary libraries:
```{python}
%matplotlib inline
import os
import numpy as np
import calendar
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from cycler import cycler
import pooch  # download data / avoid re-downloading
from IPython import get_ipython


sns.set_palette("colorblind")
palette = sns.color_palette("twilight", n_colors=12)
pd.options.display.max_rows = 8
```

## First case study: Titanic dataset

First, it is important to download automatically remote files for reproducibility (and avoid typing names manually)
```{python}
url = "http://josephsalmon.eu/enseignement/datasets/titanic.csv"
path_target = "./titanic.csv"
path, fname = os.path.split(path_target)
pooch.retrieve(url, path=path, fname=fname, known_hash=None)  # if needed `pip install pooch`
```

Reading the file as a `pandas` dataframe:

```{python}
df_titanic_raw = pd.read_csv("titanic.csv")
```

Visualize the end of the dataset:
```{python}
df_titanic_raw.tail(n=3)
```

Visualize the beginning of the dataset:

```{python}
df_titanic_raw.head(n=5)
```



### Missing values
It is common to encounter features/covariates with missing values.
In `pandas` they were mostly handled as `np.nan` (not a number).
In the future, they will be treated as `NA` (Not Available), in a similar way as in R; see the [Pandas documentation on missing data](https://pandas.pydata.org/pandas-docs/stable/user_guide/missing_data.html) for standard behavior and details.

Note that the main difference between `pd.NA` and `np.nan` is that `pd.NA` propagates even for comparisons:

```{python}
pd.NA == 1
```
whereas
```{python}
np.nan == 1
```

Testing the presence of missing values
```{python}
pd.isna(pd.NA)
pd.isna(np.nan)
```

The simplest strategy (when you can / when you have enough samples) consists of removing all nans/NAs.


```{python}
df_titanic = df_titanic_raw.dropna()
df_titanic.tail(3)
```

```{python}
# Useful info on the dataset (especially missing values!)
df_titanic.info()
```

```{python}
# Check that the `Cabin` information is mostly missing; the same hold for `Age`
df_titanic_raw.info()
```

### Description of the `titanic.csv` dataset

Details of the dataset are given [here](https://biostat.app.vumc.org/wiki/pub/Main/DataSets/titanic3info.txt)

- `Survived`: 	 Survival 	0 = No, 1 = Yes
- `Pclass`: 	 Ticket class 	1 = 1st, 2 = 2nd, 3 = 3rd
- `Sex`: 	     Sex male/female
- `Age`: 	     Age in years
- `Sibsp`: 	     # of siblings/spouses aboard the Titanic
- `Parch`: 	     # of parents/children aboard the Titanic
- `Ticket`: 	 Ticket number
- `Fare`: 	     Passenger fare
- `Cabin`: 	     Cabin number
- `Embarked`:    Port of Embarkation C = Cherbourg, Q = Queenstown, S = Southampton
- `Name`:        Name of the passenger
- `PassengerId`: Number to identify passenger

::: {.callout-note}

For those interested, an extended version of the dataset is available here <https://biostat.app.vumc.org/wiki/pub/Main/DataSets/titanic.txt>.
:::

### Simple descriptive statistics
```{python}
df_titanic.describe()
```

### Visualization

- Histograms (please avoid...often useless)
```{python}
#| layout-ncol: 1

fig, ax = plt.subplots(1, 1, figsize=(5, 5))
ax.hist(df_titanic['Age'], density=True, bins=25)
plt.xlabel('Age')
plt.ylabel('Proportion')
plt.title("Passager age histogram")
plt.show()
```

- Kernel Density Estimate (KDE):  :

```{python}
#| layout-ncol: 1

fig, ax = plt.subplots(1, 1, figsize=(5, 5))
sns.kdeplot(
    df_titanic["Age"], ax=ax, fill=True, cut=0, bw_adjust=0.1
)
plt.xlabel("Proportion")
plt.ylabel("Age")
plt.title("Passager age kernel density estimate")
plt.tight_layout()
plt.show()
```

::: {.callout-note}

The bandwidth parameter (here encoded as `bw_adjust`) controls the smoothing level. It is a common parameter in kernel smoothing, investigated thoroughly in the non-parametric statistics literature.
:::

- Swarmplot:
```{python}
#| layout-ncol: 1

fig, ax = plt.subplots(1, 1, figsize=(5, 5))
sns.swarmplot(
    data=df_titanic_raw,
    ax=ax,
    x="Sex",
    y="Age",
    hue="Survived",
    palette={0: "r", 1: "k"},
    order=["female", "male"],
)
plt.title("Passager age by gender/survival")
plt.legend(labels=["Died", "Survived"], loc="upper left")
plt.tight_layout()
plt.show()

```


::: {.callout-important appearance='default' icon="false"}

##  EXERCISE density over histogram

Plot the density estimate over the histogram
:::

### Interactivity
Interactive interaction with codes and output is nowadays getting easier and easier (see also Shiny app in R-software).
In Python, one can use `plotly`, or `widgets` and the `interact` package for this purpose.
We are going to visualize that on the simple KDE and histogram examples.

```{python}
import plotly.graph_objects as go
import numpy as np
from scipy import stats

# Create figure
fig = go.FigureWidget()

# Add traces, one for each slider step
bws = np.arange(0.01, 0.51, 0.01)
xx = np.arange(0, 100, 0.5)
for step in bws:
    kernel = stats.gaussian_kde(df_titanic['Age'], bw_method=step)
    yy = kernel(xx)
    fig.add_trace(
        go.Scatter(
            visible=False,
            fill='tozeroy',
            fillcolor='rgba(67, 67, 67, 0.5)',
            line=dict(color="black", width=2),
            name=f"Bw = {step:.2f}",
            x=xx,
            y=yy))

# Make 10th trace visible
fig.data[10].visible = True

# Create and add slider
steps = []
for i in range(len(fig.data)):
    step = dict(
        method="update",
        args=[{"visible": [False] * len(fig.data)},
            #   {"title": f"{fig.data[i].name}"}
              ],
              label=f"{bws[i]:.2f}"
              )
    step["args"][0]["visible"][i] = True  # Toggle i'th trace to "visible"
    steps.append(step)
sliders = [dict(
    active=10,
    currentvalue={"prefix": "Bandwidth = "},
    pad={"t": 50},
    steps=steps
)]

fig.update_layout(
    sliders=sliders,
    template="simple_white",
    title=f"Impact of the bandwidth on the KDE",
    showlegend=False,
)

fig.show()
```

```{python}
import plotly.graph_objects as go
import numpy as np
from scipy import stats

# Create figure
fig = go.FigureWidget()

# Add traces, one for each slider step
bws = np.arange(0.01, 5.51, 0.3)
xx = np.arange(0, 100, 0.5)

for step in bws:
    fig.add_trace(
        go.Histogram(
            x=df_titanic['Age'],
            xbins=dict( # bins used for histogram
            start=xx.min(),
            end=xx.max(),
            size=step
            ),
            autobinx = False,
            visible=False,
            marker_color="rgba(67, 67, 67, 0.5)",
            name=f"Bandwidth = {step:.2f}"
            ))

# Make 10th trace visible
fig.data[10].visible = True

# Create and add slider
steps = []
for i in range(len(fig.data)):
    step = dict(
        method="update",
        args=[{"visible": [False] * len(fig.data)},
            #   {"title": f"{fig.data[i].name}"}
              ],
              label=f"{bws[i]:.2f}"
              )
    step["args"][0]["visible"][i] = True  # Toggle i'th trace to "visible"
    steps.append(step)
sliders = [dict(
    active=10,
    currentvalue={"prefix": "Bandwidth = "},
    pad={"t": 50},
    steps=steps
)]

fig.update_layout(
    sliders=sliders,
    template="simple_white",
    title=f"Impact of the bandwidth on histograms",
    showlegend=False,
)

fig.show()
```

### IPython widgets (in Jupyter notebooks)

```python
import ipywidgets as widgets
from ipywidgets import interact, fixed

def hist_explore(
    dataset=df_titanic,
    variable=df_titanic.columns,
    n_bins=24,
    alpha=0.25,
    density=False,
):
    fig, ax = plt.subplots(1, 1, figsize=(5, 5))
    ax.hist(
        dataset[variable], density=density, bins=n_bins, alpha=alpha
    )  # standardization
    plt.ylabel("Density level")
    plt.title(f"Dataset {dataset.attrs['name']}:\n Histogram for passengers' age")
    plt.tight_layout()
    plt.show()


interact(
    hist_explore,
    dataset=fixed(df_titanic),
    n_bins=(1, 50, 1),
    alpha=(0, 1, 0.1),
    density=False,
)
```


```python
def kde_explore(dataset=df_titanic, variable=df_titanic.columns, bw=5):
    fig, ax = plt.subplots(1, 1, figsize=(5, 5))
    sns.kdeplot(dataset[variable], bw_adjust=bw, fill=True, cut=0, ax=ax)
    plt.ylabel("Density level")
    plt.title(f"Dataset:\n KDE for passengers'  {variable}")
    plt.tight_layout()
    plt.show()

interact(kde_explore, dataset=fixed(df_titanic), bw=(0.001, 2, 0.01))
```


### `Groupby` function
How does the survival rate change w.r.t. to sex?

```{python}
df_titanic_raw.groupby('Sex')[['Survived']].aggregate(lambda x: x.mean())
```

How does the survival rate change w.r.t. the class?


```{python}
df_titanic.columns
```


```{python}
#| layout-ncol: 1

fig, ax = plt.subplots(1, 1, figsize=(5, 5))

df_titanic.groupby('Pclass')['Survived'].aggregate(lambda x:
                                                   x.mean()).plot(ax=ax,kind='bar')
plt.xlabel('Classe')
plt.ylabel('Taux de survie')
plt.title('Taux de survie par classe')
plt.show()
```


::: {.callout-important appearance='default' icon="false"}
##  EXERCISE median by class

Perform a similar analysis with the median for the price per class in pounds.
:::


### `catplot`: a visual `groupby`

```{python}
#| layout-ncol: 1

ax=sns.catplot(
    x="Pclass",
    y="Age",
    hue="Sex",
    palette={'female': 'red', 'male': 'b'},
    data=df_titanic_raw,
    jitter = '0.2',
    s=8,
)
sns.move_legend(ax, "upper left", bbox_to_anchor=(0.8, 0.8))
plt.show()
```

```{python}
#| layout-ncol: 1

ax=sns.catplot(
    x="Pclass",
    y="Age",
    hue="Sex",
    palette={'female': 'red', 'male': 'b'},
    alpha=0.8,
    data=df_titanic_raw,
    kind='swarm',
    s=11,
)
sns.move_legend(ax, "upper left", bbox_to_anchor=(0.8, 0.8))
plt.show()
```

```{python}
#| layout-ncol: 1

ax=sns.catplot(
    x="Sex",
    y="Age",
    hue="Sex",
    palette={'female': 'red', 'male': 'b'},
    col='Pclass',
    alpha=0.8,
    data=df_titanic_raw,
    kind='swarm',
    s=6,
    height=5,
    aspect=0.35
)
plt.show()
```

```{python}
#| layout-ncol: 1

ax=sns.catplot(x='Pclass',
            y='Age',
            hue="Sex",
            palette={'female': 'red', 'male': 'b'},
            data=df_titanic_raw,
            kind="violin",
            alpha=0.8,
)
sns.move_legend(ax, "upper left", bbox_to_anchor=(0.8, 0.8))
plt.show()
```

Beware: large difference in sex ratio by class

```{python}
df_titanic_raw.groupby(['Sex', 'Pclass'])[['Sex']].count()
df_titanic_raw.groupby(['Sex'])[['Sex']].count()
```


Consider checking the raw data, as often boxplots or simple statistics are not enough to understand the diversity inside the data; see for instance the discussion by Carl Bergstrom on [Mastodon](https://fediscience.org/@ct_bergstrom/110267907188002904).


```{python}

References:

- [Practical Business Python](https://pbpython.com/groupby-agg.html), Comprehensive Guide to Grouping and Aggregating with Pandas,  by Chris Moffitt

### pd.crosstab

```{python}
pd.crosstab(
    df_titanic_raw["Sex"],
    df_titanic_raw["Pclass"],
    values=df_titanic_raw["Sex"],
    aggfunc="count",
    normalize=False,
)
```


```{python}
df_titanic
```

```{python}
df_titanic.index
```

```{python}
df_titanic.columns
```

```{python}
pd.options.display.max_rows = 12
df_titanic.dtypes

df_titanic['Name'].astype(str)
```


### From `numpy` to `pandas`

useful for using packages on top of `pandas` (*e.g.,* `sklearn`, though nowadays it works out of the box with `pandas`)

```{python}
array_titanic = df_titanic.values  # associated numpy array
array_titanic
```

::: {.callout-important appearance='default' icon="false"}

## EXERCISE: `dropna`

Perform the following operation: remove the columns Cabin from the raw
dataset, and then remove the rows with the variable `Age` missing.


[Hint]{.underline}: check the ['dropna' documentation](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.dropna.html).
:::


### 1D dataset: Series (a column of a DataFrame)

A Series is a labeled 1D column of a kind.

```{python}
fare = df_titanic['Fare']
fare
```


### Attributes *Series*: indices and values

```{python}
fare.values[:10]
```

Contrarily to *numpy* arrays, you can index with other formats than integers:

```{python}
# Be careful, what follows changes the indexing
df_titanic_raw = df_titanic_raw.set_index('Name')
df_titanic_raw
```

```{python}
age = df_titanic_raw['Age']
age['Behr, Mr. Karl Howell']
```

```{python}
age.mean()
```

```{python}
df_titanic_raw[age < 2]
```

```{python}
# You can come back to the original indexing
df_titanic_raw = df_titanic_raw.reset_index()
```


### Counting values for categorical variables

```{python}
df_titanic_raw['Embarked'].value_counts(normalize=False, sort=True,
                                        ascending=False)
```

```{python}
#| eval: false
pd.options.display.max_rows = 70
df_titanic[df_titanic['Embarked'] == 'C']
dir(numpy)
```
```{python}
#| class: output-scroll
#| echo: false
pd.options.display.max_rows = 70
df_titanic[df_titanic['Embarked'] == 'C']
```

<br>
[Comments]{.underline}: not all passengers from Cherbourg are Gallic (&#127467;&#127479;: *gaulois*) ...


What is the survival rate for raw data?
```{python}
df_titanic_raw['Survived'].mean()
```

What is the survival rate for data after removing missing values?
```{python}
df_titanic['Survived'].mean()
```
See also the command:

```{python}
df_titanic.groupby(['Sex'])[['Survived', 'Age', 'Fare']].mean()
```

**Conclusion**: Be careful when you remove some missing values, the missingness might be informative!


::: {.callout-important appearance='default' icon="false"}
##  EXERCISE: More data analysis

What was the proportion of women on the boat?
:::


### Data import/export

The Pandas library supports many formats:

 - CSV, text
 - SQL database
 - Excel
 - HDF5
 - JSON
 - HTML
 - pickle
 - sas, stata
 - ...

### Exploration

You can explore the data starting from the top or the bottom of the file:


#### `head` command
```{python}
pd.options.display.max_rows = 8
df_titanic_raw.tail()
```

#### `tail` command

```{python}
df_titanic_raw.head()
```


### Access values by line/columns etc.

- `iloc`
```{python}
df_titanic_raw.iloc[0:2, 1:8]
```

- `loc`

```{python}
# with original indexing:
# df_titanic_raw.loc[128]

# with naming indexing
df_titanic_raw = df_titanic_raw.set_index('Name')  # You can only do it once !!
df_titanic_raw.loc['Bonnell, Miss. Elizabeth', 'Fare']
```

```{python}
df_titanic_raw.loc['Bonnell, Miss. Elizabeth']
```

```{python}
df_titanic_raw.loc['Bonnell, Miss. Elizabeth', 'Survived']
df_titanic_raw.loc['Bonnell, Miss. Elizabeth', 'Survived'] = 0
```

```{python}
df_titanic_raw.loc['Bonnell, Miss. Elizabeth']
```

```{python}
# set back the original value
df_titanic_raw.loc['Bonnell, Miss. Elizabeth', 'Survived'] = 1
df_titanic_raw = df_titanic_raw.reset_index()  # Back to original indexing
```

### `groupby`

```{python}
df_titanic.groupby(['Sex'])[['Survived', 'Age', 'Fare', 'Pclass']].mean()
```

### Create binned values

```{python}
#| layout-ncol: 1
bins=np.arange(0, 100, 10)
current_palette = sns.color_palette()

df_test = pd.DataFrame({ 'Age': pd.cut(df_titanic['Age'], bins=bins, right=False)})
ax = sns.countplot(data=df_test, x='Age', color=current_palette[0])
ax.tick_params(axis='x', labelrotation=90)
```

**References**:

- Other interactive tools for data visualization: Altair, Bokeh. See comparisons by Aarron Geller: [link](https://sites.northwestern.edu/researchcomputing/2022/02/03/what-is-the-best-interactive-plotting-package-in-python/)

- An interesting tutorial: [Altair introduction](https://infovis.fh-potsdam.de/tutorials/)

- [Introduction on geopandas](https://geopandas.org/en/stable/getting_started/introduction.html)

- [Notebook on French departememen/womennts issues](https://www.kaggle.com/code/scratchpad/notebook670ec82922/edit)

- [Choropleth Maps in practice with Plotly and Python](https://towardsdatascience.com/choropleth-maps-in-practice-with-plotly-and-python-672a5eef3a19) by Thibaud Lamothe
- [European data on France geography](https://data.europa.eu/data/datasets/5fb11a6b13b6030b71898d44?locale=fr)
